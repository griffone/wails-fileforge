// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

export class ConversionRequest {
    /**
     * Creates a new ConversionRequest instance.
     * @param {Partial<ConversionRequest>} [$$source = {}] - The source object to create the ConversionRequest.
     */
    constructor($$source = {}) {
        if (!("inputPath" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["inputPath"] = "";
        }
        if (!("outputPath" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["outputPath"] = "";
        }
        if (!("format" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["format"] = "";
        }
        if (!("options" in $$source)) {
            /**
             * @member
             * @type {{ [_: string]: any }}
             */
            this["options"] = {};
        }
        if (!("category" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["category"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ConversionRequest instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ConversionRequest}
     */
    static createFrom($$source = {}) {
        const $$createField3_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("options" in $$parsedSource) {
            $$parsedSource["options"] = $$createField3_0($$parsedSource["options"]);
        }
        return new ConversionRequest(/** @type {Partial<ConversionRequest>} */($$parsedSource));
    }
}

export class ConversionResult {
    /**
     * Creates a new ConversionResult instance.
     * @param {Partial<ConversionResult>} [$$source = {}] - The source object to create the ConversionResult.
     */
    constructor($$source = {}) {
        if (!("success" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["success"] = false;
        }
        if (!("message" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["message"] = "";
        }
        if (!("outputPath" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["outputPath"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new ConversionResult instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {ConversionResult}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new ConversionResult(/** @type {Partial<ConversionResult>} */($$parsedSource));
    }
}

export class SupportedFormat {
    /**
     * Creates a new SupportedFormat instance.
     * @param {Partial<SupportedFormat>} [$$source = {}] - The source object to create the SupportedFormat.
     */
    constructor($$source = {}) {
        if (!("category" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["category"] = "";
        }
        if (!("formats" in $$source)) {
            /**
             * @member
             * @type {string[]}
             */
            this["formats"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new SupportedFormat instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {SupportedFormat}
     */
    static createFrom($$source = {}) {
        const $$createField1_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("formats" in $$parsedSource) {
            $$parsedSource["formats"] = $$createField1_0($$parsedSource["formats"]);
        }
        return new SupportedFormat(/** @type {Partial<SupportedFormat>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Map($Create.Any, $Create.Any);
const $$createType1 = $Create.Array($Create.Any);
